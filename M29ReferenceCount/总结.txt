_1StringWithRF.cpp
具备引用计数功能的string类
实现关键:1.用结构体struct将数据和引用计数绑定在一起.用一个结构体指针作为数据成员(part1)
        2.特别的拷贝构造函数,进行浅拷贝的同时增加引用计数,在析构的时候减少引用计数(part1)
        3.[]操作符,进行深拷贝并减少引用计数(part2)
问题1:
    这样的具有引用计数功能的类可能因为某些意料之外的引用修改导致不讨喜的结果(part3)
    "意料之外的修改"具体为:使用指针来修改对象
解决方案1:在part1的结构体基础上增加shareable标志,一旦出现修改,不管是我们期望或不期望
的修改方式,都将对象设定为不可分享再次赋值拷贝时都会深拷贝


_2RefCountClass_test.cpp
    针对_1StringWithRF.cpp这样需要对每个要引用计数的类都要加入引用计数的代码(参考RCSTRING.h)，这样很繁琐
    解决方法：这个文件将引用计数功能提取出来,并包装成一个类,每个需要引用计数的类的数据成员结构体public继承引用计数类,
然后在构造、拷贝构造、赋值和写入拷贝(针对string)中调用引用计数类的函数对引用进行操作即可。

_3AutoRFCnt.cpp
    针对_2RefCountClass_test.cpp这样还要对每个要引用计数的类的构造、拷贝构造、赋值
和写入拷贝(针对string)中调用引用计数类的函数对引用进行操作。这样很繁琐
    解决方法：将数据成员结构体指针换成智能指针，写一个调用引用计数类函数的智能指针。
    细节探讨：
    1.在类中，为什么系统生成的拷贝构造、赋值、析构函数函数即可完成引用计数功能？
    因为数据成员被打包成一个结构体,用一个引用计数的智能指针指向结构体，系统生成的拷贝构造功能很通用,分配内存初始化后
把数据成员一一赋值为等号右边的对象的数据成员,这样就转移到了智能指针的operator=(),在里面完成了深拷贝,引用计数等。
    赋值其实就是调用了智能指针的operator=()。

