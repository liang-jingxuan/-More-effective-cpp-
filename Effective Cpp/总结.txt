E29_DoNotReturnPrivateData.cpp
    主要给出了3个返回私有数据成员句柄的场景的危害
    1.string转char*的转换过程暴露私有数据成员
    取决于转换函数operator char()的实现,不应该直接返回私有数据成员,
    而应该返回私有数据成员的拷贝,即最好以这样形式
        operator char*()const{//String 转char*
            //实现方法1：直接返回str。该方法会使得私有数据成员暴露，即使是const也能被修改
            //return str;
            //实现方法2：返回一个拷贝
            char* cpy = new char[strlen(str)+1];
            return strcpy(cpy,str);
        }

         operator const char*()const{//String 转char*
            //return str;
            char* cpy = new char[strlen(str)+1];
            return strcpy(cpy,str);
        }
    2.引用导致的私有数据成员暴露
    取决于operator[]的实现,如果[]返回了引用,那么开发者可以通过[]返回的引用修改私有数据成员.

        const char& operator[](int index) const{//读
            return str[index]; 
        }

        char& operator[](int index){//写
            return str[index]; 
        }
    这样const对象就会调用const版本的[],非const对象就会调用非const版本的[]

    3.函数返回中的string到char*转换
    由于string内部数据成员是指针,因此析构的时候应该删除该指针.
    然而这会导致下面代码无输出,因为p指向的对象已经被析构删除.
    const char* p = getstr(4);//string临时对象调用转换函数转换为char*,然后赋值给p
    cout << p << endl;
    这个问题可以通过让转换函数返回一个拷贝来解决.即上面1提到的代码



M30避免这样的成员函数：其返回值是指向成员的非const 指针或引用，但成员的访问级比这个函数要低
    如果访问级别这样排序:public<protected<private
    那么不要在public里面返回protected或private的数据成员的引用/指针,否则开发者可以通过提供的接口
直接修改protected或private数据
    解决方法:如果不得不返回指针或引用,则返回const类型的指针或引用

条款31: 千万不要返回局部对象的引用，也不要返回函数内部用new 初始化的指针的引用
    很显然,因为在退出函数的时候回析构掉.